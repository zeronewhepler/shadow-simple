plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId project.HOST_APP_APPLICATION_ID
        minSdk project.MIN_SDK_VERSION
        targetSdk project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/manager/debug/')
            assets.srcDir('build/generated/assets/test-plugin-zip/debug/')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    testOptions {
        animationsDisabled = true
    }
}



dependencies {

    implementation "androidx.core:core-ktx:$x_core_version"
    implementation "androidx.appcompat:appcompat:$x_appcompat_version"
    implementation "com.google.android.material:material:$material_version"

    implementation "commons-io:commons-io:$commons_io_version"//example复制apk用的.
    implementation "org.slf4j:slf4j-api:$slf4j_api_version"

    implementation "com.github.newzerohepler.shadow.core:common:$shadow_version"
    implementation "com.github.newzerohepler.shadow.dynamic:host:$shadow_version"

    implementation project(':constant')
    implementation project(':plugin-use-host-code-lib')
    implementation project(':test-manager')
    implementation project(':custom-view')


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-remote:3.3.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.3.0'
    androidTestImplementation "androidx.test:runner:1.3.0"



}
def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    println new Tuple2("outputFile",outputFile)
    println new Tuple2("inputFile",inputFile)
    println new Tuple2("taskDependsOn", "${projectName}:${taskName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        println description
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'manager'
    def pluginManagerApkFile = file(
            "${project(":manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':manager',
            buildType,
            moduleName,
            'manager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

    def pluginZip = file("${getRootProject().getBuildDir()}/test-plugin-loader-and-runtime-${buildType}.zip")
    println pluginZip
    generateAssetsTask.dependsOn createCopyTask(
            ':test-plugin',
            buildType,
            'test-plugin-zip',
            "test-plugin-${buildType}.zip",
            pluginZip,
            "package${buildType.capitalize()}Plugin"
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
}